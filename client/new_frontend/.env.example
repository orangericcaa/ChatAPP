import asyncio
import websockets
import json
import logging
from datetime import datetime

# 配置日志
logging.basicConfig(level=logging.INFO)
logger = logging.getLogger(__name__)

# 存储活跃连接
CONNECTIONS = {}

async def register(websocket, user_id):
    """注册新的WebSocket连接"""
    CONNECTIONS[user_id] = websocket
    logger.info(f"用户 {user_id} 已连接")

async def unregister(user_id):
    """注销WebSocket连接"""
    if user_id in CONNECTIONS:
        del CONNECTIONS[user_id]
        logger.info(f"用户 {user_id} 已断开连接")

async def broadcast_message(message, exclude_user=None):
    """广播消息给所有连接的用户"""
    websockets_to_remove = []
    for user_id, websocket in CONNECTIONS.items():
        if user_id != exclude_user:
            try:
                await websocket.send(json.dumps(message))
            except websockets.exceptions.ConnectionClosed:
                websockets_to_remove.append(user_id)
    
    # 清理断开的连接
    for user_id in websockets_to_remove:
        await unregister(user_id)

async def handle_message(websocket, message_data):
    """处理接收到的消息"""
    try:
        message = json.loads(message_data)
        message_type = message.get("type")
        user_id = message.get("user_id")
        
        if message_type == "register":
            if user_id:
                await register(websocket, user_id)
                # 广播用户上线状态
                await broadcast_message({
                    "type": "status_change",
                    "user_id": user_id,
                    "status": "online",
                    "timestamp": datetime.now().isoformat()
                }, exclude_user=user_id)
                
        elif message_type == "chat":
            receiver_id = message.get("receiver_id")
            if receiver_id in CONNECTIONS:
                await CONNECTIONS[receiver_id].send(json.dumps(message))
                
        elif message_type == "video_call":
            receiver_id = message.get("receiver_id")
            if receiver_id in CONNECTIONS:
                await CONNECTIONS[receiver_id].send(json.dumps(message))
    
    except json.JSONDecodeError:
        logger.error("无效的JSON消息")
    except Exception as e:
        logger.error(f"处理消息时出错: {e}")

async def websocket_handler(websocket, path):
    """处理WebSocket连接"""
    user_id = None
    try:
        async for message in websocket:
            data = json.loads(message)
            if not user_id and data.get("type") == "register":
                user_id = data.get("user_id")
            await handle_message(websocket, message)
            
    except websockets.exceptions.ConnectionClosed:
        logger.info("连接已关闭")
    finally:
        if user_id:
            await unregister(user_id)
            # 广播用户离线状态
            await broadcast_message({
                "type": "status_change",
                "user_id": user_id,
                "status": "offline",
                "timestamp": datetime.now().isoformat()
            })

async def main():
    """启动WebSocket服务器"""
    server = await websockets.serve(
        websocket_handler,
        "0.0.0.0",  # 监听所有网络接口
        8765        # WebSocket服务器端口
    )
    
    logger.info("WebSocket服务器已启动在端口 8765")
    await server.wait_closed()

if __name__ == "__main__":
    asyncio.run(main())